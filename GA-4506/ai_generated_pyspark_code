"import logging\nimport psycopg2\nfrom pyspark.sql import functions as F\nfrom pyspark.sql.types import StringType\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# Function to map error codes to descriptions\ndef map_error_description(error_code):\n    error_mapping = {\n        1: \"Invalid Currency ID\",\n        2: \"Missing Date\",\n        3: \"Rate Not Found\",\n        # Add more mappings as needed\n    }\n    return error_mapping.get(error_code, \"Unknown Error\")\n\n# Register the UDF\nmap_error_description_udf = F.udf(map_error_description, StringType())\n\ntry:\n    # Load data from Unity Catalog tables\n    logger.info(\"Loading data from Unity Catalog tables...\")\n    currency_df = spark.table(\"catalog.source_db.currency_data\")\n    dim_currency_df = spark.table(\"catalog.source_db.dim_currency\")\n    dim_date_df = spark.table(\"catalog.source_db.dim_date\")\n\n    # Perform lookup transformations\n    logger.info(\"Performing lookup transformations...\")\n    currency_with_keys_df = currency_df \\\n        .join(dim_currency_df, currency_df.CurrencyID == dim_currency_df.CurrencyAlternateKey, \"left\") \\\n        .join(dim_date_df, currency_df.CurrencyDate == dim_date_df.FullDateAlternateKey, \"left\") \\\n        .select(\n            dim_currency_df.CurrencyKey,\n            dim_date_df.DateKey,\n            currency_df.AverageRate,\n            currency_df.EndOfDayRate\n        )\n\n    # Error handling: Map error codes to descriptions\n    logger.info(\"Mapping error codes to descriptions...\")\n    error_df = spark.table(\"catalog.source_db.error_data\")\n    error_with_description_df = error_df.withColumn(\n        \"ErrorDescription\", map_error_description_udf(error_df.ErrorCode)\n    )\n\n    # Write processed data to Unity Catalog target table\n    logger.info(\"Writing processed data to Unity Catalog target table...\")\n    spark.sql(\"DROP TABLE IF EXISTS catalog.target_db.fact_currency\")\n    currency_with_keys_df.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"catalog.target_db.fact_currency\")\n\n    # Write error log to Unity Catalog target table\n    logger.info(\"Writing error log to Unity Catalog target table...\")\n    spark.sql(\"DROP TABLE IF EXISTS catalog.target_db.error_log\")\n    error_with_description_df.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"catalog.target_db.error_log\")\n\n    logger.info(\"ETL process completed successfully.\")\n\nexcept Exception as e:\n    logger.error(f\"An error occurred during the ETL process: {e}\")\n    raise\n"