"import logging\nfrom datetime import datetime\nfrom pyspark.sql import functions as F\nfrom pyspark.sql.types import IntegerType, DoubleType, StringType\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# Load data from Unity Catalog tables\ntry:\n    demographics_df = spark.table(\"catalog.insurance_db.demographics\")\n    policy_df = spark.table(\"catalog.insurance_db.policy\")\n    claims_df = spark.table(\"catalog.insurance_db.claims\")\n    scores_df = spark.table(\"catalog.insurance_db.scores\")\n    aiml_insights_df = spark.table(\"catalog.insurance_db.aiml_insights\")\n    logger.info(\"Data loaded successfully from Unity Catalog tables.\")\nexcept Exception as e:\n    logger.error(f\"Error loading data from Unity Catalog tables: {e}\")\n    raise\n\n# Select relevant fields from each data source\ndemographics_selected_df = demographics_df.select(\n    \"Customer_ID\", \"Customer_Name\", \"Email\", \"Phone_Number\", \"Address\", \"City\", \"State\", \"Postal_Code\",\n    \"Date_of_Birth\", \"Gender\", \"Marital_Status\", \"Occupation\", \"Income_Level\", \"Customer_Segment\"\n)\n\npolicy_selected_df = policy_df.select(\n    \"policy_id\", \"customer_id\", \"policy_type\", \"policy_status\", \"policy_start_date\", \"policy_end_date\",\n    \"policy_term\", \"policy_premium\", \"total_premium_paid\", \"renewal_status\", \"policy_addons\"\n)\n\nclaims_selected_df = claims_df.select(\n    \"Claim_ID\", \"Policy_ID\", \"Claim_Date\", \"Claim_Type\", \"Claim_Status\", \"Claim_Amount\", \"Claim_Payout\"\n)\n\nscores_selected_df = scores_df.select(\n    \"Customer_ID\", \"Credit_Score\", \"Fraud_Score\", \"Customer_Risk_Score\"\n)\n\naiml_insights_selected_df = aiml_insights_df.select(\n    \"Customer_ID\", \"Churn_Probability\", \"Next_Best_Offer\", \"Claims_Fraud_Probability\", \"Revenue_Potential\"\n)\n\n# Join demographics and policy data on Customer_ID\ndemographics_policy_joined_df = demographics_selected_df.join(\n    policy_selected_df, demographics_selected_df.Customer_ID == policy_selected_df.customer_id, \"inner\"\n)\n\n# Join the result with claims data on policy_id\ndemographics_policy_claims_joined_df = demographics_policy_joined_df.join(\n    claims_selected_df, demographics_policy_joined_df.policy_id == claims_selected_df.Policy_ID, \"inner\"\n)\n\n# Summarize data to calculate summary statistics\nsummarized_df = demographics_policy_claims_joined_df.groupBy(\"Customer_ID\").agg(\n    F.count(\"Claim_ID\").alias(\"Total_Claims\"),\n    F.count(\"policy_id\").alias(\"Policy_Count\"),\n    F.max(\"Claim_Date\").alias(\"Recent_Claim_Date\"),\n    F.avg(\"Claim_Amount\").alias(\"Average_Claim_Amount\")\n)\n\n# Join summarized data with detailed data on Customer_ID\nfinal_joined_df = demographics_policy_claims_joined_df.join(\n    summarized_df, \"Customer_ID\", \"inner\"\n)\n\n# Calculate additional metrics and insights\nfinal_calculated_df = final_joined_df.withColumn(\n    \"Age\", F.datediff(F.current_date(), F.to_date(\"Date_of_Birth\", \"yyyy-MM-dd\")) / 365\n).withColumn(\n    \"Claim_To_Premium_Ratio\", F.when(final_joined_df.total_premium_paid != 0, final_joined_df.Claim_Amount / final_joined_df.total_premium_paid).otherwise(0)\n).withColumn(\n    \"Claims_Per_Policy\", F.when(final_joined_df.Policy_Count != 0, final_joined_df.Total_Claims / final_joined_df.Policy_Count).otherwise(0)\n).withColumn(\n    \"Retention_Rate\", F.lit(0.85)\n).withColumn(\n    \"Cross_Sell_Opportunities\", F.lit(\"Multi-Policy Discount, Home Coverage Add-on\")\n).withColumn(\n    \"Upsell_Potential\", F.lit(\"Premium Vehicle Coverage\")\n)\n\n# Join all data sources into a comprehensive dataset\ncustomer_360_df = final_calculated_df.join(\n    aiml_insights_selected_df, \"Customer_ID\", \"inner\"\n).join(\n    scores_selected_df, \"Customer_ID\", \"inner\"\n)\n\n# Write the processed data to Unity Catalog tables using the Delta format\ntry:\n    spark.sql(\"DROP TABLE IF EXISTS catalog.insurance_db.customer_360\")\n    customer_360_df.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"catalog.insurance_db.customer_360\")\n    logger.info(\"Data written successfully to Unity Catalog table 'customer_360'.\")\nexcept Exception as e:\n    logger.error(f\"Error writing data to Unity Catalog table: {e}\")\n    raise\n"